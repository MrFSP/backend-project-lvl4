"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("reflect-metadata");

var _path = _interopRequireDefault(require("path"));

var _fastify = _interopRequireDefault(require("fastify"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _fastifyTypeorm = _interopRequireDefault(require("fastify-typeorm"));

var _fastifyErrorPage = _interopRequireDefault(require("fastify-error-page"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _fastifyFormbody = _interopRequireDefault(require("fastify-formbody"));

var _fastifySecureSession = _interopRequireDefault(require("fastify-secure-session"));

var _fastifyFlash = _interopRequireDefault(require("fastify-flash"));

var _fastifyReverseRoutes = _interopRequireDefault(require("fastify-reverse-routes"));

var _fastifyMethodOverride = _interopRequireDefault(require("fastify-method-override"));

var _pug = _interopRequireDefault(require("pug"));

var _i18next = _interopRequireDefault(require("i18next"));

var _ru = _interopRequireDefault(require("./locales/ru.js"));

var _webpackConfig = _interopRequireDefault(require("../webpack.config.js"));

var _ormconfig = _interopRequireDefault(require("../ormconfig.js"));

var _index = _interopRequireDefault(require("./routes/index.js"));

var _index2 = _interopRequireDefault(require("./helpers/index.js"));

var _User = _interopRequireDefault(require("./entity/User.js"));

var _Guest = _interopRequireDefault(require("./entity/Guest.js"));

var _rollbar = _interopRequireDefault(require("rollbar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-check
// import auth from './plugins/auth';
const isProduction = process.env.NODE_ENV === 'production';
const isDevelopment = !isProduction;

const setUpViews = app => {
  const {
    devServer
  } = _webpackConfig.default;
  const devHost = `http://${devServer.host}:${devServer.port}`;
  const domain = isDevelopment ? devHost : '';
  const helpers = (0, _index2.default)(app);
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    defaultContext: { ...helpers,
      assetPath: filename => `${domain}/assets/${filename}`
    },
    templates: _path.default.join(__dirname, '..', 'server', 'views')
  });
  app.decorateReply('render', function (path, locals) {
    this.view(path, { ...locals,
      reply: this
    });
  });
};

const setUpStaticAssets = app => {
  // eslint-disable-next-line no-unused-vars
  const domain = isDevelopment ? 'http://localhost:8080' : '';
  app.register(_fastifyStatic.default, {
    root: _path.default.join(__dirname, '..', 'dist', 'public'),
    prefix: '/assets/'
  });
}; // eslint-disable-next-line no-unused-vars


const setupLocalization = app => {
  _i18next.default.init({
    lng: 'ru',
    fallbackLng: 'en',
    debug: isDevelopment,
    resources: {
      ru: _ru.default
    }
  });
};

const addHooks = app => {
  app.decorateRequest('currentUser', null);
  app.decorateRequest('signedIn', false); // eslint-disable-next-line no-unused-vars

  app.addHook('preHandler', async (req, _reply) => {
    const userId = req.session.get('userId');

    if (userId) {
      req.currentUser = await _User.default.find(userId);
      req.signedIn = true;
    } else {
      req.currentUser = new _Guest.default();
    }
  });
};

const registerPlugins = app => {
  app.register(_fastifyErrorPage.default);
  app.register(_fastifyReverseRoutes.default);
  app.register(_fastifyFormbody.default); // app.register(fastifyCookie);

  app.register(_fastifySecureSession.default, {
    // cookieName: 'sessionAuth',
    secret: 'a secret with minimum length of 32 characters',
    cookie: {
      path: '/'
    } // cookie: { secure: false },
    // expires: 7 * 24 * 60 * 60,

  });
  app.register(_fastifyFlash.default); // app.register(auth);

  app.register(_fastifyMethodOverride.default);
  app.register(_fastifyTypeorm.default, _ormconfig.default).after(err => {
    if (err) throw err;
  });
};

const rollbar = new _rollbar.default({
  accessToken: process.env.ROLLBAR,
  captureUncaught: true,
  captureUnhandledRejections: true
});
rollbar.log('Rollbar started!');

const errorHandler = app => {
  app.setErrorHandler(function (error, request, reply) {
    rollbar.error(`Error: ${error}`, request, reply);
  });
};

var _default = () => {
  const app = (0, _fastify.default)({
    logger: {
      prettyPrint: isDevelopment,
      timestamp: !isDevelopment,
      base: null
    }
  });
  registerPlugins(app);
  setupLocalization(app);
  setUpViews(app);
  setUpStaticAssets(app);
  (0, _index.default)(app);
  addHooks(app);
  errorHandler(app);
  return app;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,